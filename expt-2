#mcs expt 2
import cmath as m
n=3
i=6

#For large number of N
print("For large number of clusters")
N1 = int(input("Value of Number of clusters: "))
Q = (3*N1)**(1/2)
S1 = (Q**n)/i
s1 = 10*m.log(S1,10)
print("Value of S/I ratio for equidistant cells: ", s1.real, " db")
S2 = 1/((2*(Q+1)**(-n))+(2*Q**(-n))+(2*(Q-1)**(-n)))
s2 = 10*m.log(S2,10)
print("Value of S/I ratio for non-equidistant cells: ", s2.real, " db")

#For small number of N
print("For small number of clusters")
N2 = int(input("Value of Number of clusters: "))
Q = (3*N2)**(1/2)
S3 = (Q**n)/i
s3 = 10*m.log(S3,10)
print("Value of S/I ratio for equidistant cells: ", s3.real, " db")
S4 = 1/((2*(Q+1)**(-n))+(2*Q**(-n))+(2*(Q-1)**(-n)))
s4 = 10*m.log(S4,10)
print("Value of S/I ratio for non-equidistant cells: ", s4.real, " db")

if s1.real> s3.real and s2.real > s4.real:
    print("S/I ratio increases as cell number increases.")
